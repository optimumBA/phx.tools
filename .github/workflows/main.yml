name: Main

on:
  push:
    branches:
      - main

jobs:
  test_macos_fish:
    name: Test macOS script with fish shell
    runs-on: macos-latest
    env:
      SHELL: /bin/fish
      TZ: America/New_York
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Restore script result cache
        uses: actions/cache@v3
        id: result_cache
        with:
          key: ${{ runner.os }}-fish-script-${{ hashFiles('test/scripts/script.exp') }}-${{ hashFiles('priv/script.sh') }}
          path: priv/static/macOS.sh
      - name: Install shell
        if: steps.result_cache.outputs.cache-hit != 'true'
        run: brew install fish
      - name: Disable password prompt for macOS
        if: steps.result_cache.outputs.cache-hit != 'true'
        run: 'sudo sed -i "" "s/%admin		ALL = (ALL) ALL/%admin		ALL = (ALL) NOPASSWD: ALL/g" /etc/sudoers'
      - name: Install expect tool
        if: steps.result_cache.outputs.cache-hit != 'true'
        run: brew install expect
      - name: Remove mise config files
        run: rm -f .mise.toml .tool-versions
      - name: Test the script
        if: steps.result_cache.outputs.cache-hit != 'true'
        run: cd test/scripts && expect -d script.exp
        shell: fish -l {0}
      - name: Generate an app and start the server
        if: steps.result_cache.outputs.cache-hit != 'true'
        run: make -f test/scripts/Makefile serve
        shell: /bin/fish -l {0}
      - name: Check HTTP status code
        if: steps.result_cache.outputs.cache-hit != 'true'
        uses: nick-fields/retry@v2
        with:
          command: INPUT_SITES='["http://localhost:4000"]' INPUT_EXPECTED='[200]' ./test/scripts/check_status_code.sh
          max_attempts: 7
          retry_wait_seconds: 5
          timeout_seconds: 1
  deploy_production_app:
    name: Deploy production app
    needs:
      - test_macos_fish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
