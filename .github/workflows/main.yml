name: Main

on:
  push:
    branches:
      - main

jobs:
  test_linux_bash:
    name: Test Linux script with bash shell
    runs-on: ubuntu-latest
    env:
      TZ: America/New_York
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Restore script result cache
        uses: actions/cache@v3
        id: result_cache
        with:
          key: ${{ runner.os }}-bash-script-${{ hashFiles('test/scripts/script.exp') }}-${{ hashFiles('priv/static/Linux.sh') }}
          path: priv/static/Linux.sh
      - name: Install expect tool
        if: steps.result_cache.outputs.cache-hit != 'true'
        run: sudo apt-get update && sudo apt-get install -y expect
      - name: Test the script
        if: steps.result_cache.outputs.cache-hit != 'true'
        run: cd test/scripts && expect script.exp Linux.sh
        shell: /bin/bash -l {0}
      - name: Generate an app and start the server
        if: steps.result_cache.outputs.cache-hit != 'true'
        run: make -f test/scripts/Makefile serve
        shell: /bin/bash -l {0}
      - name: Check HTTP status code
        if: steps.result_cache.outputs.cache-hit != 'true'
        uses: nick-fields/retry@v2
        with:
          command: INPUT_SITES='["http://localhost:4000"]' INPUT_EXPECTED='[200]' ./test/scripts/check_status_code.sh
          max_attempts: 7
          retry_wait_seconds: 5
          timeout_seconds: 1
  test_linux_fish:
    name: Test Linux script with fish shell
    runs-on: ubuntu-latest
    env:
      TZ: America/New_York
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Restore script result cache
        uses: actions/cache@v3
        id: result_cache
        with:
          key: ${{ runner.os }}-fish-script-${{ hashFiles('test/scripts/script.exp') }}-${{ hashFiles('priv/static/Linux.sh') }}
          path: priv/static/Linux.sh
      - name: Install shell
        if: steps.result_cache.outputs.cache-hit != 'true'
        run: sudo apt-get update && sudo apt-get install -y fish
      - name: Install expect tool
        if: steps.result_cache.outputs.cache-hit != 'true'
        run: sudo apt-get update && sudo apt-get install -y expect
      - name: Test the script
        if: steps.result_cache.outputs.cache-hit != 'true'
        run: cd test/scripts && expect script.exp Linux.sh
        shell: /bin/fish -l {0}
      - name: Generate an app and start the server
        if: steps.result_cache.outputs.cache-hit != 'true'
        run: make -f test/scripts/Makefile serve
        shell: /bin/fish -l {0}
      - name: Check HTTP status code
        if: steps.result_cache.outputs.cache-hit != 'true'
        uses: nick-fields/retry@v2
        with:
          command: INPUT_SITES='["http://localhost:4000"]' INPUT_EXPECTED='[200]' ./test/scripts/check_status_code.sh
          max_attempts: 7
          retry_wait_seconds: 5
          timeout_seconds: 1
  test_linux_zsh:
    name: Test Linux script with zsh shell
    runs-on: ubuntu-latest
    env:
      TZ: America/New_York
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Restore script result cache
        uses: actions/cache@v3
        id: result_cache
        with:
          key: ${{ runner.os }}-zsh-script-${{ hashFiles('test/scripts/script.exp') }}-${{ hashFiles('priv/static/Linux.sh') }}
          path: priv/static/Linux.sh
      - name: Install shell
        if: steps.result_cache.outputs.cache-hit != 'true'
        run: sudo apt-get update && sudo apt-get install -y zsh
      - name: Install expect tool
        if: steps.result_cache.outputs.cache-hit != 'true'
        run: sudo apt-get update && sudo apt-get install -y expect
      - name: Test the script
        if: steps.result_cache.outputs.cache-hit != 'true'
        run: cd test/scripts && expect script.exp Linux.sh
        shell: /bin/zsh -l {0}
      - name: Generate an app and start the server
        if: steps.result_cache.outputs.cache-hit != 'true'
        run: make -f test/scripts/Makefile serve
        shell: /bin/zsh -l {0}
      - name: Check HTTP status code
        if: steps.result_cache.outputs.cache-hit != 'true'
        uses: nick-fields/retry@v2
        with:
          command: INPUT_SITES='["http://localhost:4000"]' INPUT_EXPECTED='[200]' ./test/scripts/check_status_code.sh
          max_attempts: 7
          retry_wait_seconds: 5
          timeout_seconds: 1
  deploy_production_app:
    name: Deploy production app
    needs:
      - test_linux_bash
      - test_linux_fish
      - test_linux_zsh
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
